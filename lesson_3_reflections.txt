When would you want to use a remote repository rather than keeping all your work local?
  Collaborators can make changes based on the remote repository while you work on your own changes
  To distinguish what should be public vs what you're working on that isn't stable yet

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
  If you made changes to your local branch, automatically pulling changes can override and have conflicts with your current work. Manually pulling ensures that any changes will be expected.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
  Forks: creating a 'clone' on GitHub. You would use this when you want to work off of someone else's repository, and make new changes while giving credit to the originator.
  Clones: creating a copy either locally, or creating a copy off of a remote repository onto your local.
  Branches: creating a new file based on an existing repository.

What is the benefit of having a copy of the last known state of the remote
  stored locally?

  Having a copy of the last known state of the remote stored locally can be help-
  ful when making changes offline. After you make changes, you can run git diff to
  see the changes from the master on remote.

How would you collaborate without using Git or GitHub? What would be easier, and
what would be harder?
  Without using Git or GitHub, collaboration would be done via dropbox, email,
  or another file sharing service. It would be easier because no code is needed,
  and there is no possibility of conflicts between changes since collaboration
  would have to occur linearly. On the other hand, this doesn't allow for
  collaborators working simultaneously and is not ideal for efficiency.

When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?
  By working in separate branches rather than directly in master, it allows for
  the same reasons for working in a branch - testing out a new feature, or
  working on a feature that isn't ready to be released, which allows other users
  to work on their own features based on the stable master branch that remains
  untouched. On the other hand, working directly in master is much easier - you
  can make changes directly on your local master, commit and push these changes.
